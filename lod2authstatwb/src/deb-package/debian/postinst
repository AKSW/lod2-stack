#!/bin/sh
# postinst script for lod2statworkbench
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

# some script code copied from virtuoso init.d script
# With this code we can correctly verify if the virtuoso server is running
DAEMON=/usr/bin/virtuoso-t
VIRTUOSOVERSION=virtuoso-opensource
SHORTNAME=virtuoso
PIDFILE=/var/run/$VIRTUOSOVERSION.pid

LOD2DEMODIR=/var/lib/lod2statworkbench

running_pid() {
# Check if a given process pid's cmdline matches a given name
    pid=$1
    name=$2
    [ -z "$pid" ] && return 1
    [ ! -d /proc/$pid ] &&  return 1
    cmd=`cat /proc/$pid/cmdline | tr "\000" "\n"|head -n 1 |cut -d : -f 1`
    # Is this the expected server
    [ "$cmd" != "$name" ] &&  return 1
    return 0
}

running() {
# Check if the process is running looking at /proc
# (works for all users)

    # No pidfile, probably no daemon present
    [ ! -f "$PIDFILE" ] && return 1
    pid=`cat $PIDFILE`
    running_pid $pid $DAEMON || return 1
    return 0
}


# ensure we can connect properly to virtuoso
connect() {
    c=`env ODBCINI=/etc/$VIRTUOSOVERSION/bd.ini isql-iodbc DSN=LocalVirtDBA < /var/lib/lod2statworkbench/test.sql`;
    if [ -z "$c" ] ; then
	return 1;
    else 
	return 0;
    fi;
}
# end virtuoso 

case "$1" in
    configure)

	if [ -e /etc/apache2/mods-available/proxy.conf ] ; then
	    cp /etc/apache2/mods-available/proxy.conf  /etc/apache2/mods-available/proxy.conf.bak 
            cp $LOD2DEMODIR/proxy.conf /etc/apache2/mods-available/proxy.conf
	fi

	a2enmod proxy
	a2enmod proxy_http
	a2enmod ssl


	   # restart apache
	service apache2 stop
	wait
	service apache2 start
	wait


	### VIRTUOSO CONFIG
	virtetc="/etc/${VIRTUOSOVERSION}/"
	virtvar="/var/lib/${VIRTUOSOVERSION}/"
	virtuosoini="$virtetc/virtuoso.ini"

	# stop the server
	service ${VIRTUOSOVERSION} stop

	wait


	# add ontowiki directory to DirsAllowed
	# try to remove the addition first in order to avoid double entries
	sed 's/^\(DirsAllowed.*\)\(, \/var\/lib\/lod2statworkbench\)\(.*\)/\1\3/' -i $virtuosoini
	sed 's/^\(DirsAllowed.*\)/\1, \/var\/lib\/lod2statworkbench/' -i $virtuosoini


	wait 

	# restart the server
	service ${VIRTUOSOVERSION} start
	
	wait
	sleep 1;

	# if it is not running try again infinitely
	attempts=0;
	until running || [ "$attempts" -gt 5 ] ; do
		service ${VIRTUOSOVERSION} start ;
		sleep 2;
		attempts=$(($attempts+1));
	done;

	# wait with proceeding until isql-vt can properly connect and answer a query.
	attempts=0;
	until connect || [ "$attempts" -gt 5 ] ; do
		service ${VIRTUOSOVERSION} start ;
		wait ;
		sleep 1;
		attempts=$(($attempts+1));
        done;

	# substitute everywhere to be in sync with the password
	mypwd=`date  +"%H.L.%M.O.%S.D2"`
	subst="s/PWDLOD2/$mypwd/"
	sed -e $subst -i /var/lib/lod2statworkbench/create_user.sql
	sed -e $subst -i /etc/lod2statworkbench/configuration.rdf
        sed -e $subst -i /etc/lod2statworkbench/lod2statworkbench.conf
	sed -e $subst -i /etc/lod2statworkbench/storeconfig.rdf
		
	if running; then
    	        env ODBCINI=/etc/$VIRTUOSOVERSION/bd.ini isql-iodbc DSN=LocalVirtDBA < /var/lib/lod2statworkbench/create_user.sql;
    	        env ODBCINI=/etc/$VIRTUOSOVERSION/bd.ini isql-iodbc DSN=LocalVirtDBA < /var/lib/lod2statworkbench/load.sql;
    	        env ODBCINI=/etc/$VIRTUOSOVERSION/bd.ini isql-iodbc DSN=LocalVirtDBA < /var/lib/lod2statworkbench/vad_install.sql;
		chown tomcat7:tomcat7 /etc/lod2statworkbench/lod2statworkbench.conf
		chmod 640 /etc/lod2statworkbench/lod2statworkbench.conf
		wait ;
        else 
		exit 1;
	fi

	# create a upload directory
	test -d /tmp/uploads || mkdir /tmp/uploads
	chown tomcat7:tomcat7 /tmp/uploads 
	chmod 741 /tmp/uploads 

	# make tomcat ready for authentication
	bash /var/lib/lod2statworkbench/tomcatscript/prepareTomcat.sh

#	# sparql editor configuration
#	sparqlpwd=`date  +"%H.S.%M.P.%S.QL"`
#	sparqlsubst="s/PWDSPARQL/$sparqlpwd/"
#	sed -e $sparqlsubst -i /var/lib/lod2statworkbench/create_user_sparql.sql
#	sed -e $sparqlsubst -i /var/lib/lod2statworkbench/sparqled_config.xml
#	if [ -d /etc/sparqled ] ; then 
#	    cp /var/lib/lod2statworkbench/sparqled_config.xml /etc/sparqled/config.xml
#	fi
#	if running; then
#    	        env ODBCINI=/etc/$VIRTUOSOVERSION/bd.ini isql-iodbc DSN=LocalVirtDBA < /var/lib/lod2statworkbench/create_user_sparql.sql;
#	fi
	
    ;;
    

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#
echo "---- ending postinst $@"

exit 0
