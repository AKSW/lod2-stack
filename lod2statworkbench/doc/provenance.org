#+STYLE:<style type="text/css">body{ width: 720px; margin: 0 auto; background-color: #FDFDFD; padding: 20px; border: solid gray 1px; text-align:justify; } h2 { border-style: solid; border-width: 0 0 2px 0; color: rgb(0, 0, 114); }</style>
Provenance in LOD2 stat workbench

* Introduction
This document describes how we can record provenance information in the LOD2 demonstrator application. It describes the approach that has currently been implemented in the LOD2 statistical office and it has some suggestions on how provenance information can be extended in the future.

* Making use of user information
Because of the work that has been done regarding the authentication of a user with a WebID, see [[TODO]], one can determine which user has logged in at run-time. The application has access to the user's unique URI and WebID information. This means that, when the user performs any meaningful action on a graph, it would theoretically be possible to record the actions that were taken by the user.
* Obtaining the actions taken by the user
The current implementation of the demonstrator for the LOD2 workbench makes heavy use of iframes to integrate components. This means that the application does not have any control on the internal behavior of the application. In such cases, it is not possible to know the exact actions that were performed by the user. Because such fine-grained provenance information is not possible, the current implementation of the provenance information in the lod2 statistical workbench only registers 'tool usage'.

In the case of the lod2 statistical office, the simplification was made that a user 'uses' a component when he clicks on the user interface panel of the tool. All further information is blocked by the iframes that are used for integrating the component.

The information that is registered when a user makes use of a tool is:
- The ID of the user if it is known (a user may user the tool before he has identified himself)
- The time that the user makes use of the tool
- The tool that is used
- The current graph that was selected at that time

There are a number of assumptions being made here. The first is that every click on a component user interface involves a meaningful action of the user. This not the case and is even unlikely for a single workflow. A second assumption is that using the tool (only) has implications on the current graph. It is very well possible that, once inside the iframe that holds the tool, the user navigates to a different graph in the rdf store. This is beyond our control however. 

In the demonstrator, the user interaction is recorded by decorating the normal tool component with an object of the ActionRecorder class. This allows the programmer a lot of flexibility in specifying which actions need to be recorded. If desired, a configuration interface can be set up to toggle the logging of specific actions on and off.
* Representing user actions
The user actions that are recorded as described in the previous section will be stored in the provenance graph of the demonstrator application (in the default case, <http://lod2.eu/provenance>). To represent actions, the W3C Provenance ontology is used (see http://www.w3.org/TR/prov-o/). The following parts of the ontology are used:

- http://www.w3.org/ns/prov#Activity :: URI that identifies the action class, used to record user actions. Because we cannot know the details of how the tool influences a graph, no specialization of the Activity class was chosen.
- http://www.w3.org/ns/prov#startedAtTime :: predicate that specifies the exact time at which an action was executed in the XML Schema date/time datatype. Because we do not know what exactly the user did with the tool, the endedAtTime property is left unspecified.
- http://www.w3.org/ns/prov#used :: predicate that indicates the tool that was used during the action.
- http://www.w3.org/ns/prov#wasInfluencedBy :: predicate that links the (presumably) modified graph to the action that gets created.
- http://www.w3.org/ns/prov#wasStartedBy :: predicate that refers to the URI of the actor that executed the action.
- http://lod2.eu/provenance/anonymous :: URI that identifies the 'anonymous' user in case the user has not signed in but was allowed to perform an action nonetheless.

The detailed information on the user, like name or email address, is not stored explicitly to save on disk space. This information can be obtained from the user's WebId when required. If it is critical that the user who performed a certain action is recorded (for auditing for instance), the application can be extended to record this information directly in a straightforward way.

* Obtaining detailed information
There are two ways to extend the provenance information with more detailed actions. Either the actions can be recorded in more detail from the integration layer, or the actions are recorded by the individual components that are used in the application.

** From the integration layer
If the level of detail has to be increased from the integration layer, the integration layer needs to have more fine-grained control on the actions taken by the components. This means that the current integration method of iframes will no longer suffice. A full-fledged API will be required for every component, be it a Web-API or a simple source API. Some components already support such APIs, however, many do not. It would require a great deal of effort from these component owners to set up these APIs.

Not only will this strategy affect the time-tables component owners significantly, the integration component will have to be completely rewritten as well. Where the integration layer used to be able to reuse most of the user interface that was already provided by the individual components, it now needs to supply one of its own for every component (and possibly for every close combination of components). The integration layer will also have to be rewritten to make use of these new APIs. This creates a significant overhead, as the workflows that were provided in the component's user interface are typically broken down into multiple API calls, which have to be 'glued' back together.
** From the individual components
Another strategy is to have the component owners use the provenance vocabulary that was proposed above. This actually does not require a lot of work for both the integration layer and the component owner. However, the component owners themselves may not have any direct gain by implementing the prov-o ontology and as such may be hard to convince.
